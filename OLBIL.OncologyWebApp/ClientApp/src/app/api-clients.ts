/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    oncologyPatient_GetAll(): Promise<OncologyPatientsListModel[] | null> {
        let url_ = this.baseUrl + "/api/OncologyPatient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOncologyPatient_GetAll(_response);
        });
    }

    protected processOncologyPatient_GetAll(response: Response): Promise<OncologyPatientsListModel[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OncologyPatientsListModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OncologyPatientsListModel[] | null>(<any>null);
    }

    oncologyPatient_CreatePatient(model: OncologyPatientModel): Promise<number> {
        let url_ = this.baseUrl + "/api/OncologyPatient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOncologyPatient_CreatePatient(_response);
        });
    }

    protected processOncologyPatient_CreatePatient(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    oncologyPatient_GetPatient(id: number): Promise<OncologyPatientModel | null> {
        let url_ = this.baseUrl + "/api/OncologyPatient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOncologyPatient_GetPatient(_response);
        });
    }

    protected processOncologyPatient_GetPatient(response: Response): Promise<OncologyPatientModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OncologyPatientModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OncologyPatientModel | null>(<any>null);
    }
}

export class OncologyPatientsListModel implements IOncologyPatientsListModel {
    items?: OncologyPatientModel[] | undefined;

    constructor(data?: IOncologyPatientsListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OncologyPatientModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OncologyPatientsListModel {
        data = typeof data === 'object' ? data : {};
        let result = new OncologyPatientsListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOncologyPatientsListModel {
    items?: OncologyPatientModel[] | undefined;
}

export class OncologyPatientModel implements IOncologyPatientModel {
    oncologyPatientId!: number;
    person?: PersonModel | undefined;
    registrationDate?: moment.Moment | undefined;
    admissionDate?: moment.Moment | undefined;
    informantsRelationship?: string | undefined;
    reasonForReferral?: string | undefined;

    constructor(data?: IOncologyPatientModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.oncologyPatientId = data["oncologyPatientId"];
            this.person = data["person"] ? PersonModel.fromJS(data["person"]) : <any>undefined;
            this.registrationDate = data["registrationDate"] ? moment(data["registrationDate"].toString()) : <any>undefined;
            this.admissionDate = data["admissionDate"] ? moment(data["admissionDate"].toString()) : <any>undefined;
            this.informantsRelationship = data["informantsRelationship"];
            this.reasonForReferral = data["reasonForReferral"];
        }
    }

    static fromJS(data: any): OncologyPatientModel {
        data = typeof data === 'object' ? data : {};
        let result = new OncologyPatientModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oncologyPatientId"] = this.oncologyPatientId;
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>undefined;
        data["admissionDate"] = this.admissionDate ? this.admissionDate.toISOString() : <any>undefined;
        data["informantsRelationship"] = this.informantsRelationship;
        data["reasonForReferral"] = this.reasonForReferral;
        return data; 
    }
}

export interface IOncologyPatientModel {
    oncologyPatientId: number;
    person?: PersonModel | undefined;
    registrationDate?: moment.Moment | undefined;
    admissionDate?: moment.Moment | undefined;
    informantsRelationship?: string | undefined;
    reasonForReferral?: string | undefined;
}

export class PersonModel implements IPersonModel {
    personId!: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    additionalLastName?: string | undefined;
    preferredName?: string | undefined;
    governmentIDNumber?: string | undefined;
    address?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    nationality?: string | undefined;
    race?: string | undefined;
    gender?: string | undefined;
    birthdate?: moment.Moment | undefined;
    birthplace?: string | undefined;
    familyStatus?: string | undefined;
    schoolLevel?: string | undefined;
    methodOfTranspotation?: string | undefined;

    constructor(data?: IPersonModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.personId = data["personId"];
            this.firstName = data["firstName"];
            this.middleName = data["middleName"];
            this.lastName = data["lastName"];
            this.additionalLastName = data["additionalLastName"];
            this.preferredName = data["preferredName"];
            this.governmentIDNumber = data["governmentIDNumber"];
            this.address = data["address"];
            this.addressLine2 = data["addressLine2"];
            this.city = data["city"];
            this.state = data["state"];
            this.country = data["country"];
            this.homePhone = data["homePhone"];
            this.mobilePhone = data["mobilePhone"];
            this.nationality = data["nationality"];
            this.race = data["race"];
            this.gender = data["gender"];
            this.birthdate = data["birthdate"] ? moment(data["birthdate"].toString()) : <any>undefined;
            this.birthplace = data["birthplace"];
            this.familyStatus = data["familyStatus"];
            this.schoolLevel = data["schoolLevel"];
            this.methodOfTranspotation = data["methodOfTranspotation"];
        }
    }

    static fromJS(data: any): PersonModel {
        data = typeof data === 'object' ? data : {};
        let result = new PersonModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["additionalLastName"] = this.additionalLastName;
        data["preferredName"] = this.preferredName;
        data["governmentIDNumber"] = this.governmentIDNumber;
        data["address"] = this.address;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["mobilePhone"] = this.mobilePhone;
        data["nationality"] = this.nationality;
        data["race"] = this.race;
        data["gender"] = this.gender;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["birthplace"] = this.birthplace;
        data["familyStatus"] = this.familyStatus;
        data["schoolLevel"] = this.schoolLevel;
        data["methodOfTranspotation"] = this.methodOfTranspotation;
        return data; 
    }
}

export interface IPersonModel {
    personId: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    additionalLastName?: string | undefined;
    preferredName?: string | undefined;
    governmentIDNumber?: string | undefined;
    address?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    nationality?: string | undefined;
    race?: string | undefined;
    gender?: string | undefined;
    birthdate?: moment.Moment | undefined;
    birthplace?: string | undefined;
    familyStatus?: string | undefined;
    schoolLevel?: string | undefined;
    methodOfTranspotation?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}